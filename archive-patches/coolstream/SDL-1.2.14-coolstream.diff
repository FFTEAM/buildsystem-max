    SDL 1.2.14 from coolstream

diff --git a/SDL-1.2.14/Borland.zip b/SDL-1.2.14/Borland.zip
deleted file mode 100644
index ed8f45d..0000000
Binary files a/SDL-1.2.14/Borland.zip and /dev/null differ
diff --git a/SDL-1.2.14/VisualC.zip b/SDL-1.2.14/VisualC.zip
deleted file mode 100644
index 5ee0c63..0000000
Binary files a/SDL-1.2.14/VisualC.zip and /dev/null differ
diff --git a/SDL-1.2.14/VisualCE.zip b/SDL-1.2.14/VisualCE.zip
deleted file mode 100644
index 0f71254..0000000
Binary files a/SDL-1.2.14/VisualCE.zip and /dev/null differ
diff --git a/SDL-1.2.14/Watcom-OS2.zip b/SDL-1.2.14/Watcom-OS2.zip
deleted file mode 100644
index b3d1a67..0000000
Binary files a/SDL-1.2.14/Watcom-OS2.zip and /dev/null differ
diff --git a/SDL-1.2.14/Watcom-Win32.zip b/SDL-1.2.14/Watcom-Win32.zip
deleted file mode 100644
index c60af6d..0000000
Binary files a/SDL-1.2.14/Watcom-Win32.zip and /dev/null differ
diff --git a/SDL-1.2.14/Xcode.tar.gz b/SDL-1.2.14/Xcode.tar.gz
deleted file mode 100644
index b18e74e..0000000
Binary files a/SDL-1.2.14/Xcode.tar.gz and /dev/null differ
diff --git a/SDL-1.2.14/cfg-dfb.sh b/SDL-1.2.14/cfg-dfb.sh
new file mode 100755
index 0000000..bf7b769
--- /dev/null
+++ b/SDL-1.2.14/cfg-dfb.sh
@@ -0,0 +1,20 @@
+PREFIX=/opt/newcross/arm-cx2450x-linux-gnueabi/arm-cx2450x-linux-gnueabi/sys-root/usr
+CCPATH=
+HOST=arm-cx2450x-linux-gnueabi
+
+export PKG_CONFIG_PATH=${PREFIX}/lib/pkgconfig
+export CC=$CCPATH$HOST-gcc
+export AR=$CCPATH$HOST-ar
+export NM=$CCPATH$HOST-nm
+export RANLIB=$CCPATH$HOST-ranlib
+export OBJDUMP=$CCPATH$HOST-objdump
+export STRIP=$CCPATH$HOST-strip
+
+export FREETYPE_CONFIG=$PREFIX/bin/freetype-config
+export CURL_CONFIG=$PREFIX/bin/curl-config
+export PKG_CONFIG_PATH==$PREFIX/lib/pkgconfig
+
+export CFLAGS="-I/opt/newcross/arm-cx2450x-linux-gnueabi/arm-cx2450x-linux-gnueabi/sys-root/usr/include/directfb"
+export LDFLAGS="-L"$PREFIX"/lib -ldirectfb"
+#./autogen.sh
+./configure --prefix=${PREFIX} --build=i386-pc-linux-gnu --host=$HOST --enable-video-directfb --disable-esd --disable-oss --disable-alsa-shared --disable-video-x11 --disable-video-fbcon --disable-arts --enable-alsa --disable-alsatest $*
diff --git a/SDL-1.2.14/cfg.sh b/SDL-1.2.14/cfg.sh
new file mode 100755
index 0000000..cefe7f8
--- /dev/null
+++ b/SDL-1.2.14/cfg.sh
@@ -0,0 +1,19 @@
+PREFIX=/opt/newcross/arm-cx2450x-linux-gnueabi/arm-cx2450x-linux-gnueabi/sys-root/usr
+CCPATH=
+HOST=arm-cx2450x-linux-gnueabi
+
+export PKG_CONFIG_PATH=${PREFIX}/lib/pkgconfig
+export CC=$CCPATH$HOST-gcc
+export AR=$CCPATH$HOST-ar
+export NM=$CCPATH$HOST-nm
+export RANLIB=$CCPATH$HOST-ranlib
+export OBJDUMP=$CCPATH$HOST-objdump
+export STRIP=$CCPATH$HOST-strip
+
+export FREETYPE_CONFIG=$PREFIX/bin/freetype-config
+export CURL_CONFIG=$PREFIX/bin/curl-config
+export PKG_CONFIG_PATH==$PREFIX/lib/pkgconfig
+
+export CFLAGS="-I/opt/newcross/arm-cx2450x-linux-gnueabi/arm-cx2450x-linux-gnueabi/sys-root/usr/include/directfb"
+
+./configure --prefix=${PREFIX} --build=i386-pc-linux-gnu --host=$HOST --disable-video-directfb --disable-esd --disable-oss --disable-alsa-shared --disable-video-x11 --enable-video-fbcon --disable-arts --enable-alsa --disable-alsatest $*
diff --git a/SDL-1.2.14/include/SDL_keysym.h b/SDL-1.2.14/include/SDL_keysym.h
index 9010128..3dcb582 100644
--- a/SDL-1.2.14/include/SDL_keysym.h
+++ b/SDL-1.2.14/include/SDL_keysym.h
@@ -297,6 +297,22 @@ typedef enum {
         /*@}*/
 
 	/* Add any other keys here */
+        SDLK_VOLUP              = 400,
+        SDLK_VOLDOWN            = 401,
+        SDLK_MUTE               = 402,
+        SDLK_RED                = 403,
+        SDLK_GREEN              = 404,
+        SDLK_YELLOW             = 405,
+        SDLK_BLUE               = 406,
+        SDLK_EPG                = 407,
+        SDLK_FAV                = 408,
+        SDLK_TV                 = 409,
+        SDLK_RADIO              = 410,
+        SDLK_INFO               = 411,
+        SDLK_TEXT               = 412,
+        SDLK_AUDIO              = 413,
+        SDLK_VIDEO              = 413,
+        SDLK_PLAY              = 414,
 
 	SDLK_LAST
 } SDLKey;
diff --git a/SDL-1.2.14/sdl.pc b/SDL-1.2.14/sdl.pc
new file mode 100644
index 0000000..64bf286
--- /dev/null
+++ b/SDL-1.2.14/sdl.pc
@@ -0,0 +1,15 @@
+# sdl pkg-config source file
+
+prefix=/opt/newcross/arm-cx2450x-linux-gnueabi/arm-cx2450x-linux-gnueabi/sys-root/usr
+exec_prefix=${prefix}
+libdir=${exec_prefix}/lib
+includedir=${prefix}/include
+
+Name: sdl
+Description: Simple DirectMedia Layer is a cross-platform multimedia library designed to provide low level access to audio, keyboard, mouse, joystick, 3D hardware via OpenGL, and 2D video framebuffer.
+Version: 1.2.14
+Requires:
+Conflicts:
+Libs: -L${libdir} -Wl,-rpath,${libdir} -lSDL  -lpthread
+Libs.private: -lSDL  -lpthread  -lm  -lasound -lm -ldl -lpthread -L/lib -ldirectfb -lfusion -ldirect -lpthread   -lpthread
+Cflags: -I${includedir}/SDL -D_GNU_SOURCE=1 -D_REENTRANT
diff --git a/SDL-1.2.14/src/audio/alsa/SDL_alsa_audio.c b/SDL-1.2.14/src/audio/alsa/SDL_alsa_audio.c
index e3ce985..df4d7ef 100644
--- a/SDL-1.2.14/src/audio/alsa/SDL_alsa_audio.c
+++ b/SDL-1.2.14/src/audio/alsa/SDL_alsa_audio.c
@@ -315,7 +315,7 @@ static void ALSA_PlayAudio(_THIS)
 
 	while ( frames_left > 0 && this->enabled ) {
 		/* This works, but needs more testing before going live */
-		/*SDL_NAME(snd_pcm_wait)(pcm_handle, -1);*/
+		SDL_NAME(snd_pcm_wait)(pcm_handle, -1);
 
 		status = SDL_NAME(snd_pcm_writei)(pcm_handle, sample_buf, frames_left);
 		if ( status < 0 ) {
diff --git a/SDL-1.2.14/src/events/SDL_keyboard.c b/SDL-1.2.14/src/events/SDL_keyboard.c
index 4767f2e..315920e 100644
--- a/SDL-1.2.14/src/events/SDL_keyboard.c
+++ b/SDL-1.2.14/src/events/SDL_keyboard.c
@@ -331,6 +331,23 @@ int SDL_KeyboardInit(void)
 	keynames[SDLK_EURO] = "euro";
 	keynames[SDLK_UNDO] = "undo";
 
+        keynames[SDLK_VOLUP] = "volup";
+        keynames[SDLK_VOLDOWN] = "voldown";
+        keynames[SDLK_MUTE] = "mute";
+        keynames[SDLK_RED] = "red";
+        keynames[SDLK_GREEN] = "green";
+        keynames[SDLK_YELLOW] = "yellow";
+        keynames[SDLK_BLUE] = "blue";
+        keynames[SDLK_EPG] = "epg";
+        keynames[SDLK_FAV] = "favorite";
+        keynames[SDLK_TV] = "tv";
+        keynames[SDLK_RADIO] = "radio";
+        keynames[SDLK_INFO] = "info";
+        keynames[SDLK_TEXT] = "text";
+        keynames[SDLK_AUDIO] = "audio";
+        keynames[SDLK_VIDEO] = "video";
+        keynames[SDLK_PLAY] = "play";
+
 	/* Done.  Whew. */
 	return(0);
 }
diff --git a/SDL-1.2.14/src/video/directfb/SDL_DirectFB_events.c b/SDL-1.2.14/src/video/directfb/SDL_DirectFB_events.c
index b0e12ee..23d2e68 100644
--- a/SDL-1.2.14/src/video/directfb/SDL_DirectFB_events.c
+++ b/SDL-1.2.14/src/video/directfb/SDL_DirectFB_events.c
@@ -186,6 +186,95 @@ static SDL_keysym *DirectFB_TranslateKey (DFBInputEvent *ev, SDL_keysym *keysym)
   keysym->mod = KMOD_NONE; /* FIXME */
   keysym->unicode = (DFB_KEY_TYPE (ev->key_symbol) == DIKT_UNICODE) ? ev->key_symbol : 0;
 
+  if(DFB_KEY_TYPE (ev->key_symbol) == DIKT_SPECIAL) {
+	switch(ev->key_symbol) {
+		case DIKS_RED:
+			keysym->sym = SDLK_y;
+			break;
+		case DIKS_GREEN:
+			keysym->sym = SDLK_n;
+			break;
+		case DIKS_YELLOW:
+			keysym->sym = SDLK_YELLOW;
+			break;
+		case DIKS_BLUE:
+			keysym->sym = SDLK_BLUE;
+			break;
+		case DIKS_EXIT:
+			keysym->sym = SDLK_ESCAPE;
+			break;
+		case DIKS_HELP:
+			keysym->sym = SDLK_HELP;
+			break;
+		case DIKS_MENU:
+			keysym->sym = SDLK_MENU;
+			break;
+		case DIKS_TV:
+			keysym->sym = SDLK_TV;
+			break;
+		case DIKS_EPG:
+			keysym->sym = SDLK_EPG;
+			break;
+		case DIKS_POWER:
+			keysym->sym = SDLK_POWER;
+			break;
+		case DIKS_VOLUME_UP:
+			keysym->sym = SDLK_VOLUP;
+			break;
+		case DIKS_VOLUME_DOWN:
+			keysym->sym = SDLK_VOLDOWN;
+			break;
+		case DIKS_INFO:
+			keysym->sym = SDLK_INFO;
+			break;
+		case DIKS_FAVORITES:
+			keysym->sym = SDLK_FAV;
+			break;
+		case DIKS_TEXT:
+			keysym->sym = SDLK_TEXT;
+			break;
+		case DIKS_PAGE_UP:
+			keysym->sym = SDLK_PAGEUP;
+			break;
+		case DIKS_PAGE_DOWN:
+			keysym->sym = SDLK_PAGEDOWN;
+			break;
+		case DIKS_MODE:
+			keysym->sym = SDLK_MODE;
+			break;
+		case DIKS_PLAY:
+			keysym->sym = SDLK_PLAY;
+			break;
+		case DIKS_PLAYPAUSE:
+			keysym->sym = SDLK_PAUSE;
+			break;
+		case DIKS_OK:
+			keysym->sym = SDLK_RETURN;
+			break;
+		case DIKS_CURSOR_UP:
+			keysym->sym = SDLK_UP;
+			break;
+		case DIKS_CURSOR_DOWN:
+			keysym->sym = SDLK_DOWN;
+			break;
+		case DIKS_CURSOR_LEFT:
+			keysym->sym = SDLK_LEFT;
+			break;
+		case DIKS_CURSOR_RIGHT:
+			keysym->sym = SDLK_RIGHT;
+			break;
+		default:
+			keysym->sym = SDLK_UNKNOWN;
+			break;
+	}
+#if 0
+	if(SDL_GetKeyName(keysym->sym))
+		printf("SDL key %s\n", SDL_GetKeyName(keysym->sym));
+	else
+		printf("SDL key unknown\n");
+#endif
+	return keysym;
+  }
   if (ev->key_symbol > 0 && ev->key_symbol < 128)
     keysym->sym = ev->key_symbol;
   else
diff --git a/SDL-1.2.14/src/video/fbcon/SDL_fbevents.c b/SDL-1.2.14/src/video/fbcon/SDL_fbevents.c
index b3d56d0..a4f7503 100644
--- a/SDL-1.2.14/src/video/fbcon/SDL_fbevents.c
+++ b/SDL-1.2.14/src/video/fbcon/SDL_fbevents.c
@@ -1,6 +1,6 @@
 /*
     SDL - Simple DirectMedia Layer
-    Copyright (C) 1997-2009 Sam Lantinga
+    Copyright (C) 1997-2006 Sam Lantinga
 
     This library is free software; you can redistribute it and/or
     modify it under the terms of the GNU Lesser General Public
@@ -39,6 +39,9 @@
 #include <linux/vt.h>
 #include <linux/kd.h>
 #include <linux/keyboard.h>
+#include <linux/input.h>
+
+int rc_fd = -1;
 
 #include "SDL_timer.h"
 #include "SDL_mutex.h"
@@ -149,7 +152,8 @@ static void FB_vgainitkeymaps(int fd)
 
 int FB_InGraphicsMode(_THIS)
 {
-	return((keyboard_fd >= 0) && (saved_kbd_mode >= 0));
+	//return((keyboard_fd >= 0) && (saved_kbd_mode >= 0));
+	return 1;
 }
 
 int FB_EnterGraphicsMode(_THIS)
@@ -217,6 +221,7 @@ int FB_EnterGraphicsMode(_THIS)
 
 void FB_LeaveGraphicsMode(_THIS)
 {
+	return;
 	if ( FB_InGraphicsMode(this) ) {
 		ioctl(keyboard_fd, KDSETMODE, KD_TEXT);
 		ioctl(keyboard_fd, KDSKBMODE, saved_kbd_mode);
@@ -233,6 +238,11 @@ void FB_LeaveGraphicsMode(_THIS)
 
 void FB_CloseKeyboard(_THIS)
 {
+	if(rc_fd > 0) {
+		close(rc_fd);
+		rc_fd = -1;
+	}
+	return;
 	if ( keyboard_fd >= 0 ) {
 		FB_LeaveGraphicsMode(this);
 		if ( keyboard_fd > 0 ) {
@@ -242,8 +252,40 @@ void FB_CloseKeyboard(_THIS)
 	keyboard_fd = -1;
 }
 
+int open_input ()
+{
+  int rc = -1, cnt = 0;
+  while (1) {
+        struct stat s;
+        char tmp[128];
+        char name[128];
+        sprintf (tmp, "/dev/input/event%d", cnt);
+        if (stat (tmp, &s))
+          break;
+        /* open Remote Control */
+        if ((rc = open (tmp, O_RDONLY)) == -1) {
+          perror (tmp);
+          return 0;
+        }
+        if (ioctl (rc, EVIOCGNAME (128), name) < 0) {
+          perror ("EVIOCGNAME failed");
+          break;
+	}
+        if (strstr (name, "remote control")) {
+          printf ("Using %s for remote control\n", tmp);
+          break;
+        }
+        close (rc);
+        rc = -1;
+        ++cnt;
+  }
+  return rc;
+}
+
 int FB_OpenKeyboard(_THIS)
 {
+	rc_fd = open_input();
+	return;
 	/* Open only if not already opened */
  	if ( keyboard_fd < 0 ) {
 		static const char * const tty0[] = { "/dev/tty0", "/dev/vc/0", NULL };
@@ -312,6 +354,7 @@ int FB_OpenKeyboard(_THIS)
 		/* Set up keymap */
 		FB_vgainitkeymaps(keyboard_fd);
  	}
+
  	return(keyboard_fd);
 }
 
@@ -982,7 +1025,7 @@ static void switch_vt(_THIS, unsigned short which)
 	SDL_mutexV(hw_lock);
 }
 
-static void handle_keyboard(_THIS)
+static void handle_keyboard(_THIS, int what)
 {
 	unsigned char keybuf[BUFSIZ];
 	int i, nread;
@@ -990,6 +1033,66 @@ static void handle_keyboard(_THIS)
 	int scancode;
 	SDL_keysym keysym;
 
+	if (what == 1) {
+		struct input_event ev;
+		int x = read(rc_fd, &ev, sizeof(struct input_event));
+//printf("event: type %d code %x (%d) value %d\n", ev.type, ev.code, ev.code, ev.value);
+		if(ev.type == 0)
+			return;
+		if(ev.value == 0)
+			pressed = SDL_RELEASED;
+		else
+			pressed = SDL_PRESSED;
+		switch(ev.code) {
+                  case KEY_0:		keysym.sym = SDLK_0; break;
+                  case KEY_1:		keysym.sym = SDLK_1; break;
+                  case KEY_2:		keysym.sym = SDLK_2; break;
+                  case KEY_3:		keysym.sym = SDLK_3; break;
+                  case KEY_4:		keysym.sym = SDLK_4; break;
+                  case KEY_5:		keysym.sym = SDLK_5; break;
+                  case KEY_6:		keysym.sym = SDLK_6; break;
+                  case KEY_7:		keysym.sym = SDLK_7; break;
+                  case KEY_8:		keysym.sym = SDLK_8; break;
+                  case KEY_9:		keysym.sym = SDLK_8; break;
+                  case KEY_RIGHT:	keysym.sym = SDLK_RIGHT; break;
+                  case KEY_LEFT:	keysym.sym = SDLK_LEFT; break;
+                  case KEY_UP:		keysym.sym = SDLK_UP; break;
+                  case KEY_DOWN:	keysym.sym = SDLK_DOWN; break;
+                  case KEY_OK:		keysym.sym = SDLK_RETURN; break;
+                  case KEY_POWER:	keysym.sym = SDLK_POWER; break;
+                  case KEY_HELP:	keysym.sym = SDLK_HELP; break;
+                  case KEY_MENU:	keysym.sym = SDLK_MENU; break;
+                  case KEY_EXIT:	keysym.sym = SDLK_ESCAPE; break;
+                  case KEY_PAGEDOWN: 	keysym.sym = SDLK_PAGEDOWN; break;
+                  case KEY_PAGEUP: 	keysym.sym = SDLK_PAGEUP; break;
+
+                  case KEY_MUTE:	keysym.sym = SDLK_MUTE; break;
+                  //case KEY_RED:		keysym.sym = SDLK_RED; break;
+                  case KEY_RED:		keysym.sym = SDLK_y; break;
+                  //case KEY_GREEN:	keysym.sym = SDLK_GREEN; break;
+                  case KEY_GREEN:	keysym.sym = SDLK_n; break;
+                  case KEY_YELLOW:	keysym.sym = SDLK_YELLOW; break;
+                  case KEY_BLUE:	keysym.sym = SDLK_BLUE; break;
+                  case KEY_VOLUMEUP:	keysym.sym = SDLK_VOLUP; break;
+                  case KEY_VOLUMEDOWN:	keysym.sym = SDLK_VOLDOWN; break;
+                  case KEY_AUDIO:	keysym.sym = SDLK_AUDIO; break;
+                  case KEY_VIDEO:	keysym.sym = SDLK_VIDEO; break;
+                  case KEY_TV:		keysym.sym = SDLK_TV; break;
+                  case KEY_RADIO:	keysym.sym = SDLK_RADIO; break;
+                  case KEY_TEXT:	keysym.sym = SDLK_TEXT; break;
+                  case KEY_INFO:	keysym.sym = SDLK_INFO; break;
+
+                  case 0x19c:		keysym.sym = SDLK_TOPLEFT; break;
+                  case 0x197:		keysym.sym = SDLK_TOPRIGHT; break;
+		default:
+			printf("Unknown code %d (%x)\n", ev.code, ev.code);
+			return;
+		}
+		posted += SDL_PrivateKeyboard(pressed, &keysym);
+		return;
+	}
+//FIXME
+	return;
 	nread = read(keyboard_fd, keybuf, BUFSIZ);
 	for ( i=0; i<nread; ++i ) {
 		scancode = keybuf[i] & 0x7F;
@@ -1063,10 +1166,16 @@ void FB_PumpEvents(_THIS)
 				max_fd = mouse_fd;
 			}
 		}
+               if ( rc_fd >= 0 ) {
+                        FD_SET(rc_fd, &fdset);
+                        if ( max_fd < rc_fd ) {
+                                max_fd = rc_fd;
+                        }
+                }
 		if ( select(max_fd+1, &fdset, NULL, NULL, &zero) > 0 ) {
 			if ( keyboard_fd >= 0 ) {
 				if ( FD_ISSET(keyboard_fd, &fdset) ) {
-					handle_keyboard(this);
+					handle_keyboard(this, 0);
 				}
 			}
 			if ( mouse_fd >= 0 ) {
@@ -1074,6 +1183,11 @@ void FB_PumpEvents(_THIS)
 					handle_mouse(this);
 				}
 			}
+                       if ( rc_fd >= 0 ) {
+                                if ( FD_ISSET(rc_fd, &fdset) ) {
+                                        handle_keyboard(this, 1);
+                                }
+                        }
 		}
 	} while ( posted );
 }
diff --git a/SDL-1.2.14/src/video/fbcon/SDL_fbvideo.c b/SDL-1.2.14/src/video/fbcon/SDL_fbvideo.c
index 81a89da..237552b 100644
--- a/SDL-1.2.14/src/video/fbcon/SDL_fbvideo.c
+++ b/SDL-1.2.14/src/video/fbcon/SDL_fbvideo.c
@@ -48,7 +48,7 @@
 #include "SDL_fbmatrox.h"
 #include "SDL_fbriva.h"
 
-/*#define FBCON_DEBUG*/
+//#define FBCON_DEBUG
 
 #if defined(i386) && defined(FB_TYPE_VGA_PLANES)
 #define VGA16_FBCON_SUPPORT
@@ -394,6 +394,9 @@ static int FB_CheckMode(_THIS, struct fb_var_screeninfo *vinfo,
 	vinfo->yres = *h;
 	vinfo->yres_virtual = *h;
 	vinfo->activate = FB_ACTIVATE_TEST;
+#ifdef FBCON_DEBUG
+	fprintf(stderr, "Check mode %dx%d at %d bpp\n", *w, *h, (index+1)*8);
+#endif
 	if ( ioctl(console_fd, FBIOPUT_VSCREENINFO, vinfo) == 0 ) {
 #ifdef FBCON_DEBUG
 		fprintf(stderr, "Checked mode %dx%d at %d bpp, got mode %dx%d at %d bpp\n", *w, *h, (index+1)*8, vinfo->xres, vinfo->yres, vinfo->bits_per_pixel);
@@ -687,11 +690,13 @@ static int FB_VideoInit(_THIS, SDL_PixelFormat *vformat)
 		SDL_nummodes[i] = 0;
 		SDL_modelist[i] = NULL;
 	}
-	if ( SDL_getenv("SDL_FB_BROKEN_MODES") != NULL ) {
+	if (1) // SDL_getenv("SDL_FB_BROKEN_MODES") != NULL ) 
+	{
 		FB_AddMode(this, current_index, current_w, current_h, 0);
 	} else if(modesdb) {
 		while ( read_fbmodes_mode(modesdb, &vinfo) ) {
-			for ( i=0; i<NUM_MODELISTS; ++i ) {
+			for ( i=0; i<NUM_MODELISTS; ++i )
+			{
 				unsigned int w, h;
 
 				if (rotate == FBCON_ROTATE_CW || rotate == FBCON_ROTATE_CCW) {
@@ -1004,14 +1009,16 @@ static SDL_Surface *FB_SetVideoMode(_THIS, SDL_Surface *current,
 	Uint32 Rmask;
 	Uint32 Gmask;
 	Uint32 Bmask;
+	Uint32 Amask;
 	char *surfaces_mem;
 	int surfaces_len;
 
+#if 0
 	/* Set the terminal into graphics mode */
 	if ( FB_EnterGraphicsMode(this) < 0 ) {
 		return(NULL);
 	}
-
+#endif
 	/* Restore the original palette */
 	FB_RestorePalette(this);
 
@@ -1096,8 +1103,13 @@ static SDL_Surface *FB_SetVideoMode(_THIS, SDL_Surface *current,
 		Bmask <<= 1;
 		Bmask |= (0x00000001<<vinfo.blue.offset);
 	}
+        Amask = 0;
+        for ( i=0; i<vinfo.transp.length; ++i ) {
+                Amask <<= 1;
+                Amask |= (0x00000001<<vinfo.transp.offset);
+        }
 	if ( ! SDL_ReallocFormat(current, vinfo.bits_per_pixel,
-	                                  Rmask, Gmask, Bmask, 0) ) {
+	                                  Rmask, Gmask, Bmask, Amask) ) {
 		return(NULL);
 	}
 
diff --git a/SDL-1.2.14/symbian.zip b/SDL-1.2.14/symbian.zip
deleted file mode 100644
index b3686e9..0000000
Binary files a/SDL-1.2.14/symbian.zip and /dev/null differ
